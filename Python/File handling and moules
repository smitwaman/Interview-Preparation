**Module: File Handling and Modules**

**File I/O: Reading from and Writing to Files using File Objects**
File Input/Output (I/O) operations in Python are performed using file objects. These objects allow you to interact with files on the disk by reading data from them or writing data to them.

- **Writing to a File:**
```python
with open("example.txt", "w") as file:
    file.write("Hello, World!\n")
    file.write("This is a sample text.")
```
In this example, we open a file named "example.txt" in write mode (`"w"`), write some text to it using the `write()` method, and then close the file automatically using the `with` statement.

- **Reading from a File:**
```python
with open("example.txt", "r") as file:
    data = file.read()
    print(data)
```
Here, we open the same file in read mode (`"r"`), read its contents using the `read()` method, and then print the data.

**Handling Exceptions: Try-Except Blocks, Raising Exceptions, and Handling Errors**
Exception handling in Python allows you to gracefully handle errors or exceptional conditions that may occur during the execution of your code.

- **Try-Except Blocks:**
```python
try:
    num = int(input("Enter a number: "))
    result = 10 / num
    print("Result:", result)
except ZeroDivisionError:
    print("Error: Cannot divide by zero!")
except ValueError:
    print("Error: Please enter a valid number!")
```
In this example, we use a try-except block to handle potential errors. If the user inputs `0`, a `ZeroDivisionError` will occur. If the user inputs a non-integer value, a `ValueError` will occur. We catch and handle these exceptions accordingly.

- **Raising Exceptions:**
```python
def validate_age(age):
    if age < 0:
        raise ValueError("Age cannot be negative.")

try:
    user_age = int(input("Enter your age: "))
    validate_age(user_age)
    print("Valid age entered.")
except ValueError as e:
    print("Error:", e)
```
Here, we define a function `validate_age()` that raises a `ValueError` if the provided age is negative. We then call this function inside a try-except block and handle the raised exception.

**Modules and Packages: Importing Modules, Creating and Organizing Packages**
Modules and packages allow you to organize and reuse your code more effectively by breaking it into smaller, more manageable units.

- **Importing Modules:**
```python
import math
print(math.sqrt(25))  # Output: 5.0
```
Here, we import the `math` module and use its `sqrt()` function to calculate the square root of `25`.

- **Creating and Organizing Packages:**
Packages are directories that contain multiple Python modules. To create a package, you simply create a directory and place Python files (modules) inside it. You can then import these modules using dot notation.
```
my_package/
    __init__.py
    module1.py
    module2.py
```
In this example, `my_package` is a package containing two modules, `module1` and `module2`. To import functions/classes from these modules, you can use statements like `from my_package.module1 import my_function`.

**Standard Library Overview: Overview of Commonly Used Modules**
Python's standard library provides a rich set of modules for various tasks, ranging from operating system interactions to mathematical calculations.

- **OS Module:**
```python
import os
print(os.getcwd())  # Output: Current working directory
```
The `os` module provides functions for interacting with the operating system, such as file manipulation, directory operations, and process management.

- **Sys Module:**
```python
import sys
print(sys.platform)  # Output: Operating system platform
```
The `sys` module contains system-specific parameters and functions, such as command-line arguments, Python version, and system exit.

- **Math Module:**
```python
import math
print(math.pi)  # Output: Value of pi (3.141592653589793)
```
The `math` module offers mathematical functions and constants for numerical operations, such as trigonometric functions, logarithms, and mathematical constants.

- **Random Module:**
```python
import random
print(random.randint(1, 10))  # Output: Random integer between 1 and 10
```
The `random` module provides functions for generating random numbers, random selections, shuffling sequences, and setting random seed values.

- **Datetime Module:**
```python
import datetime
print(datetime.datetime.now())  # Output: Current date and time
```
The `datetime` module allows manipulation and formatting of dates and times. It provides classes for working with dates, times, timedeltas, and timezones.

Understanding file handling, exception handling, modules, and the standard library is essential for writing robust and efficient Python programs. By mastering these concepts, you can develop complex applications and leverage the full power of Python's ecosystem.
